
"""
Auto Video Generator + YouTube Uploader
---------------------------------------
Creates a ~5-minute (300s) video on a trending topic and uploads it to YouTube.

‚úÖ Auto-installs missing modules and FFmpeg (safe for GitHub Actions)
‚úÖ Fetches trending topics (India default)
‚úÖ Generates TTS narration via gTTS
‚úÖ Downloads Pexels stock videos for visuals
‚úÖ Assembles final 720p video with captions
‚úÖ Uploads to YouTube (if secrets available)
‚úÖ Graceful fallback if any service fails

GitHub Secrets Required:
 - YT_CLIENT_ID
 - YT_CLIENT_SECRET
 - YT_REFRESH_TOKEN
 - PEXELS_API_KEY
"""

import os
import sys
import subprocess
import time
import math
import random
import requests
import logging
from datetime import datetime
from typing import List

# ---------------- AUTO-INSTALL DEPENDENCIES ---------------- #
def ensure_packages():
    required = [
        "requests", "moviepy", "gtts", "pytrends",
        "google-api-python-client", "google-auth-oauthlib", "google-auth"
    ]
    for pkg in required:
        try:
            __import__(pkg.split('.')[0])
        except ImportError:
            subprocess.run([sys.executable, "-m", "pip", "install", pkg, "-q"])

    # Ensure ffmpeg exists (moviepy dependency)
    try:
        subprocess.run(["ffmpeg", "-version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
    except Exception:
        subprocess.run(["sudo", "apt-get", "install", "-y", "ffmpeg"], check=False)

ensure_packages()

# ---------------- IMPORTS AFTER INSTALL ---------------- #
from gtts import gTTS
from pytrends.request import TrendReq
from moviepy.editor import (
    VideoFileClip, AudioFileClip, concatenate_videoclips,
    CompositeVideoClip, CompositeAudioClip, TextClip
)
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

# ---------------- CONFIG ---------------- #
OUTPUT_DIR = "outputs"
ASSETS_DIR = "assets"
os.makedirs(OUTPUT_DIR, exist_ok=True)
os.makedirs(ASSETS_DIR, exist_ok=True)

MUSIC_PATH = os.path.join(ASSETS_DIR, "music.mp3")
FINAL_VIDEO = os.path.join(OUTPUT_DIR, "final_video.mp4")
TARGET_DURATION = 300  # seconds
VIDEO_RESOLUTION = (1280, 720)
PEXELS_API_KEY = os.environ.get("PEXELS_API_KEY")

# YouTube Credentials
YT_CLIENT_ID = os.environ.get("YT_CLIENT_ID")
YT_CLIENT_SECRET = os.environ.get("YT_CLIENT_SECRET")
YT_REFRESH_TOKEN = os.environ.get("YT_REFRESH_TOKEN")

# ---------------- LOGGER ---------------- #
logging.basicConfig(level=logging.INFO, format="[%(asctime)s] %(levelname)s: %(message)s")
logger = logging.getLogger("auto_video_bot")

# ---------------- UTILITIES ---------------- #
def get_trending_topic(region="india") -> str:
    """Fetch a trending topic from Google Trends."""
    try:
        pytrends = TrendReq(hl="en-US", tz=330)
        trends_df = pytrends.trending_searches(pn=region)
        if trends_df.empty:
            return "latest tech news"
        return trends_df.iloc[random.randint(0, min(5, len(trends_df)-1)), 0]
    except Exception:
        return "global trends and updates"

def generate_script(topic: str) -> str:
    """Simple templated script generator (~750 words)."""
    intro = f"Welcome! Today we're talking about {topic}. Let's break it down in five minutes."
    segments = []
    for i in range(3):
        segments.append(
            f"Key point {i+1}: What happened and why it matters. "
            "Here's the background, the main story, and what comes next. "
            "It‚Äôs fascinating how these trends shape our world."
        )
    outro = "Thanks for watching! Subscribe for more quick insights like this every day."
    script = f"{intro}\n\n" + "\n\n".join(segments) + f"\n\n{outro}"
    # Extend script to ~750 words for 5 min
    while len(script.split()) < 750:
        script += " " + random.choice(segments)
    return script

def text_to_speech(script: str, out_path: str):
    """Convert script to speech using gTTS."""
    tts = gTTS(text=script, lang="en")
    tts.save(out_path)
    with open(out_path.replace(".mp3", ".txt"), "w", encoding="utf-8") as f:
        f.write(script)
    return out_path

def fetch_pexels_videos(query: str, duration_required: int) -> List[str]:
    """Fetch stock clips from Pexels."""
    if not PEXELS_API_KEY:
        logger.warning("‚ö†Ô∏è No PEXELS_API_KEY provided. Using fallback visuals.")
        return []

    headers = {"Authorization": PEXELS_API_KEY}
    video_files = []
    total_duration = 0
    page = 1

    while total_duration < duration_required and page <= 3:
        resp = requests.get("https://api.pexels.com/videos/search",
                            headers=headers, params={"query": query, "per_page": 5, "page": page}, timeout=30)
        if resp.status_code != 200:
            break
        for v in resp.json().get("videos", []):
            url = v["video_files"][0]["link"]
            fname = os.path.join(ASSETS_DIR, f"{v['id']}.mp4")
            try:
                with requests.get(url, stream=True) as r:
                    r.raise_for_status()
                    with open(fname, "wb") as f:
                        for chunk in r.iter_content(8192):
                            f.write(chunk)
                video_files.append(fname)
                total_duration += v.get("duration", 5)
                if total_duration >= duration_required:
                    break
            except Exception:
                continue
        page += 1
    return video_files

def assemble_video(clips: List[str], narration_path: str, out_path: str):
    """Combine clips, narration, and background music."""
    narration = AudioFileClip(narration_path)
    narration_length = narration.duration

    visuals = []
    for path in clips:
        try:
            clip = VideoFileClip(path).resize(VIDEO_RESOLUTION)
            visuals.append(clip)
        except Exception:
            pass

    if not visuals:
        # fallback text slides
        slides = []
        for i in range(5):
            txt = TextClip(f"Trending Topic {i+1}", fontsize=70, color="white",
                           size=VIDEO_RESOLUTION, method="caption")
            slides.append(txt.set_duration(TARGET_DURATION / 5))
        visuals = slides

    video = concatenate_videoclips(visuals, method="compose")
    if video.duration < narration_length:
        loops = math.ceil(narration_length / video.duration)
        video = concatenate_videoclips([video] * loops, method="compose")
    video = video.subclip(0, narration_length)

    audio_layers = [narration]
    if os.path.exists(MUSIC_PATH):
        try:
            bg = AudioFileClip(MUSIC_PATH).volumex(0.15)
            if bg.duration < narration.duration:
                loops = math.ceil(narration.duration / bg.duration)
                bg = concatenate_videoclips([bg] * loops)
            bg = bg.subclip(0, narration.duration)
            audio_layers.append(bg)
        except Exception:
            pass
    final_audio = CompositeAudioClip(audio_layers)
    video = video.set_audio(final_audio)

    logger.info("üß© Rendering final video (this may take a few minutes)...")
    video.write_videofile(out_path, fps=24, codec="libx264", audio_codec="aac", threads=2)
    return out_path

def generate_metadata(topic: str):
    title = f"{topic} ‚Äî Explained in 5 Minutes"
    description = f"Quick summary of {topic}. Generated automatically on {datetime.utcnow().strftime('%Y-%m-%d')}."
    tags = [topic.lower(), "explainer", "trending", "news"]
    return title, description, tags

def get_youtube_service():
    """Authenticate with YouTube API."""
    if not (YT_CLIENT_ID and YT_CLIENT_SECRET and YT_REFRESH_TOKEN):
        logger.warning("‚ö†Ô∏è YouTube secrets missing ‚Äî skipping upload.")
        return None
    token_data = {
        "client_id": YT_CLIENT_ID,
        "client_secret": YT_CLIENT_SECRET,
        "refresh_token": YT_REFRESH_TOKEN,
        "grant_type": "refresh_token",
    }
    r = requests.post("https://oauth2.googleapis.com/token", data=token_data)
    access_token = r.json().get("access_token")
    if not access_token:
        logger.error("Failed to fetch access token.")
        return None
    creds = Credentials(token=access_token)
    return build("youtube", "v3", credentials=creds)

def upload_to_youtube(file_path: str, title: str, description: str, tags: List[str]):
    youtube = get_youtube_service()
    if youtube is None:
        return None
    body = {
        "snippet": {"title": title, "description": description, "tags": tags, "categoryId": "28"},
        "status": {"privacyStatus": "public", "selfDeclaredMadeForKids": False},
    }
    media = MediaFileUpload(file_path, resumable=True, mimetype="video/*")
    req = youtube.videos().insert(part="snippet,status", body=body, media_body=media)
    response = None
    while response is None:
        status, response = req.next_chunk()
        if status:
            logger.info(f"Upload progress: {int(status.progress() * 100)}%")
    vid_id = response.get("id")
    logger.info(f"‚úÖ Uploaded to YouTube: https://youtu.be/{vid_id}")
    return vid_id

# ---------------- MAIN ---------------- #
def main():
    logger.info("üöÄ Starting video generation pipeline...")
    topic = get_trending_topic()
    logger.info(f"üéØ Selected topic: {topic}")

    script = generate_script(topic)
    tts_path = os.path.join(OUTPUT_DIR, "narration.mp3")
    text_to_speech(script, tts_path)

    clips = fetch_pexels_videos(topic, TARGET_DURATION)
    final_path = assemble_video(clips, tts_path, FINAL_VIDEO)

    title, desc, tags = generate_metadata(topic)
    upload_to_youtube(final_path, title, desc, tags)
    logger.info("‚úÖ Pipeline completed successfully!")

if __name__ == "__main__":
    main()

